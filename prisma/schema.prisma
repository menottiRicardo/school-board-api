// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  cid         String       @unique
  name        String?
  lastname    String?
  password    String?
  role        Role         @default(STUDENT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  school      School?      @relation(fields: [schoolId], references: [id])
  schoolId    String?
  Classroom   Classroom?   @relation(fields: [classroomId], references: [id])
  classroomId String?
  Assignment  Assignment[]
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
  PARENT
}

model School {
  id         String       @id @default(uuid())
  name       String?      @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  users      User[]
  Classroom  Classroom[]
  Period     Period[]
  SchoolYear SchoolYear[]
  Subject    Subject[]
}

model Classroom {
  id               String       @id @default(uuid())
  name             String
  School           School       @relation(fields: [schoolId], references: [id])
  schoolId         String
  Users            User[]
  assignments      Assignment[]
  Subject          Subject?     @relation(fields: [subjectId], references: [subjectId])
  subjectId String?
}

model Subject {
  subjectId   String       @id @default(uuid())
  name        String
  grade       String?
  Assignments Assignment[]
  classrooms  Classroom[]
  School      School       @relation(fields: [schoolId], references: [id])
  schoolId    String
}

model Assignment {
  id               String    @id @default(uuid())
  name             String
  description      String
  Classroom        Classroom @relation(fields: [classroomId], references: [id])
  classroomId      String
  dueDate          DateTime
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  professor        User      @relation(fields: [professorId], references: [id])
  professorId      String
  Period           Period?   @relation(fields: [periodId], references: [id])
  periodId         String?
  Subject          Subject?  @relation(fields: [subjectId], references: [subjectId])
  subjectId String?
}

model SchoolYear {
  id        String   @id @default(uuid())
  year      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  School    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  Period    Period[]
}

model Period {
  id             String       @id @default(uuid())
  name           String
  startDate      DateTime
  endDate        DateTime
  isPeriodActive Boolean      @default(false)
  Assignments    Assignment[]
  School         School       @relation(fields: [schoolId], references: [id])
  schoolId       String
  SchoolYear     SchoolYear?  @relation(fields: [schoolYearId], references: [id])
  schoolYearId   String?
}
