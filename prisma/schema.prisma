// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  cid          String       @unique
  name         String?
  lastname     String?
  password     String?
  role         Role         @default(STUDENT)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Classroom    Classroom?   @relation(fields: [classroomId], references: [id])
  classroomId  String?
  Assignment   Assignment[]
  SchoolYear   SchoolYear?  @relation(fields: [schoolYearId], references: [id])
  schoolYearId String?
  Subject      Subject[]
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
  PARENT
}

model School {
  id         String       @id @default(uuid())
  name       String?      @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  SchoolYear SchoolYear[]
}

model Classroom {
  id           String       @id @default(uuid())
  name         String
  Users        User[]
  assignments  Assignment[]
  subjects     Subject[]
  SchoolYear   SchoolYear?  @relation(fields: [schoolYearId], references: [id])
  schoolYearId String?
}

model Subject {
  id           String       @id @default(uuid())
  name         String
  Assignments  Assignment[]
  classrooms   Classroom[]
  schoolYear   SchoolYear?  @relation(fields: [schoolYearId], references: [id])
  schoolYearId String?
  teacher      User?        @relation(fields: [teacherId], references: [id])
  teacherId    String?
}

model Assignment {
  id          String    @id @default(uuid())
  name        String
  description String
  Classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId String
  dueDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  professor   User      @relation(fields: [professorId], references: [id])
  professorId String
  Period      Period?   @relation(fields: [periodId], references: [id])
  periodId    String?
  Subject     Subject?  @relation(fields: [subjectId], references: [id])
  subjectId   String?
}

model SchoolYear {
  id         String      @id @default(uuid())
  year       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  School     School      @relation(fields: [schoolId], references: [id])
  schoolId   String
  schoolName String
  Period     Period[]
  classrooms Classroom[]
  users      User[]
  subjects   Subject[]
}

model Period {
  id             String       @id @default(uuid())
  name           String
  startDate      DateTime
  endDate        DateTime
  isPeriodActive Boolean      @default(false)
  Assignments    Assignment[]
  SchoolYear     SchoolYear?  @relation(fields: [schoolYearId], references: [id])
  schoolYearId   String?
}
